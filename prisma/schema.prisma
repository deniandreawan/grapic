datasource db {
    provider          = "postgres"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      Projects[]
    assets        Assets[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Projects {
    id        String         @id @default(cuid())
    projectId String
    userId    String
    user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    title     String
    output    Json?
    prompt    String?
    type      TypeProjects
    media     Media
    status    StatusProjects
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    @@unique([userId, projectId])
}

model Assets {
    id        String     @id @default(cuid())
    assetId   String
    userId    String
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    title     String
    url       String
    type      TypeAssets
    media     Media
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    @@unique([userId, assetId])
}

enum StatusProjects {
    processing
    succeeded
    failed
}

enum Media {
    image
    video
    audio
}

enum TypeProjects {
    generate
    correction
}

enum TypeAssets {
    export
    upload
}
