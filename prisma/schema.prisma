datasource db {
    provider          = "postgres"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    credits       Int           @default(5)
    accounts      Account[]
    sessions      Session[]
    predictions   Predictions[]
    assets        Assets[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Predictions {
    id        String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    status    Status   @default(processing)
    media     Media
    type      String
    version   String
    output    Json?
    input     Json?
    createdAt DateTime @default(now())

    @@unique([id, userId])
}

model Assets {
    id        String
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    title     String
    url       String
    media     Media
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([id, userId])
}

enum Media {
    image
    video
    audio
}

enum Status {
    succeeded
    processing
    failed
}
